---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 24/05/2024                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to bind a game_object to a luabind class, to enable specific scripted behaviors.                  ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imported functions
local dbg_printf                       = western_goods_utils.dbg_printf

-- ---------------------------------------------------------------------------------------------------------------------
-- General Functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to bind an object to the Lighter Binder
--- @param obj game_object
--- @return nil
function bind(obj)
    obj:bind_object(lighter_binder(obj).binder)
end

--- Function used to display the fuel level of the lighter in the inventory.
--- @param obj game_object
--- @param sec string
--- @param str string
function build_desc_header(obj, sec, str)
    str = str or western_goods_utils.get_translation(ini_sys:r_string_ex(sec, "description"))
    if not str then
        return ""
    end

    if not western_goods_utils.validate_is_lighter(obj) then
        return western_goods_monkey_patches.ui_item_build_desc_header(obj, sec, str)
    end

    return western_goods_utils.get_translation("st_wg_lighter_header",
            utils_xml.get_color("pda_blue"),
            utils_xml.get_color("ui_gray_2"),
            utils_xml.get_color("pda_blue"),
            math.ceil(obj:condition() * 100),
            utils_xml.get_color("ui_gray_2"),
            western_goods_monkey_patches.ui_item_build_desc_header(obj, sec, str))
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Object Binder Class
-- ---------------------------------------------------------------------------------------------------------------------

class "lighter_binder" (western_goods_bind_object.object_binder_lua)

function lighter_binder:__init(obj) super(obj)
    dbg_printf("[WG] Lighter Binder | Binding object '%s'", obj:name())

    -- Fast call required so that script_light doesn't lag behind the hands
    self.object:set_fastcall(self.binder.update, self.binder)

    -- Fire source
    self.m_fire_source = western_goods_class_fire_source.fire_source()

    -- Script lights
    self.m_light_source = western_goods_class_light_source.light_source(0.002, 0.0005)

    -- Sound effects
    self.m_sounds = {
        campfire = sound_object([[western_goods_tech\lighter_use_cf]]),
    }

    -- Callbacks
    RegisterScriptCallback("actor_on_hud_animation_mark", self)
    RegisterScriptCallback("western_goods_on_campfire_use", self)
    RegisterScriptCallback("western_goods_on_item_before_use", self)
    RegisterScriptCallback("western_goods_on_hideout_furniture_light_use", self)

    -- Build variables
    self.m_fuel_critical = ini_sys:r_float_ex(self.object:section(), "wg_fuel_critical", 0.01)
    self.m_fuel_consumption = ini_sys:r_float_ex(self.object:section(), "wg_fuel_consumption", 0.0003)
    self.m_fuel_consumption_use = ini_sys:r_float_ex(self.object:section(), "wg_fuel_consumption_use", 0.05)
    self.m_light_bone = ini_sys:r_string_ex(self.object:section(), "wg_light_bone", "wpn_body")
    self.m_light_hud_bone = ini_sys:r_string_ex(self.object:section(), "wg_light_hud_bone", "wpn_body")
    self.m_is_flame_on = false
    self.m_fuel_level_saved = nil
    self.m_first_update = false
    self.m_update_rate = 1000
    self.m_update_timer = 1000
    self.m_detector_slot_id = 9
    self.m_amn_motion = "anm_campfire"
    self.m_amn_cam_motion = "matches_script"

    dbg_printf("[WG] Lighter Binder | Successfully bound object '%s'", obj:name())
end

function lighter_binder:net_destroy()
    UnregisterScriptCallback("actor_on_hud_animation_mark", self)
    UnregisterScriptCallback("western_goods_on_campfire_use", self)
    UnregisterScriptCallback("western_goods_on_item_before_use", self)
    UnregisterScriptCallback("western_goods_on_hideout_furniture_light_use", self)

    western_goods_bind_object.object_binder_lua.net_destroy(self)
end

function lighter_binder:save()
    western_goods_bind_object.object_binder_lua.save(self)

    se_save_var(self.object:id(), nil, "is_on", self.m_is_flame_on)
    se_save_var(self.object:id(), nil, "fuel_level", self.object:condition())
    dbg_printf("[WG] Lighter Binder | Save - '%s' : fuel:%s is_on:%s", self.object:name(), self.object:condition(), self.m_is_flame_on)
end

function lighter_binder:load()
    western_goods_bind_object.object_binder_lua.load(self)

    self.m_is_flame_on = se_load_var(self.object:id(), nil, "is_on") or false
    self.m_fuel_level_saved = se_load_var(self.object:id(), nil, "fuel_level") or 1.0
    dbg_printf("[WG] Lighter Binder | Load - '%s' : fuel:%s is_on:%s", self.object:name(), self.m_fuel_level_saved, self.m_is_flame_on)
end

function lighter_binder:first_update(delta)
    self.object:set_condition(self.m_fuel_level_saved or 1.0)
    self.m_fuel_level_saved = nil
end

function lighter_binder:update(delta)
    -- First update
    if not self.m_first_update then
        self.m_first_update = true
        self:first_update(delta)
    end

    -- Ensure flame is off
    if not self:get_flame_status() then
        self:set_flame_status(false)
        return
    end

    -- Ensure lighter is equipped
    if not self:check_is_primary() then
        self:set_flame_status(false)
        return
    end

    -- Turn off when out of fuel
    if not self:check_is_fueled() then
        self:set_flame_status(false)
        return
    end

    -- Fast update
    self:update_flame()

    -- Throttled update
    if not self:update_throttle(delta) then
        return
    end

    self:update_fuel()
end

function lighter_binder:update_throttle(delta)
    self.m_update_timer = self.m_update_timer - (delta or 0)
    if self.m_update_timer <= 0 then
        self.m_update_timer = self.m_update_rate
        return true
    else
        return false
    end
end

function lighter_binder:update_flame()
    self:set_flame_status(true)
    self.m_light_source:update_light(self:get_flame_bone_position())
end

function lighter_binder:update_fuel(fuel_consumption_override)
    local fuel_consumption_factor = game_difficulties.get_eco_factor("battery_consumption")
    local fuel_consumed = fuel_consumption_override or self.m_fuel_consumption * fuel_consumption_factor
    local fuel_level_new = clamp(self.object:condition() - fuel_consumed, 0.01, 1)

    self.object:set_condition(fuel_level_new)
    dbg_printf("[WG] Lighter Binder | Update Fuel - Lighter %s new fuel level '%s'", self.object:name(), self.object:condition())
end

function lighter_binder:get_flame_bone_position()
    local pos = western_goods_utils.bone_hud_position(self.object, self.m_light_hud_bone, self.m_light_bone)
    return pos or db.actor:position()
end

function lighter_binder:get_flame_status()
    local is_on = self.m_is_flame_on
    return is_on
end

function lighter_binder:set_flame_status(status)
    self.m_is_flame_on = status
    self.m_light_source:set_light_status(status)
    western_goods_utils.bone_hud_visibility(self.object, self.m_light_hud_bone, self.m_light_bone, status)
end

function lighter_binder:play_animation()
    -- Play SFX
    self.m_sounds.campfire:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)

    -- Play CFX
    actor_effects.play_item_fx(self.m_amn_cam_motion)

    -- Play HUD motion
    if self:check_is_drawn() then
        western_goods_utils.play_object_hud_animation(self.object, self.m_amn_motion)
    end
end

function lighter_binder:check_is_fueled()
    local fuel_level = self.object:condition()
    return fuel_level > self.m_fuel_critical
end

function lighter_binder:check_is_actor_owner()
    local parent = self.object:parent()
    return parent and parent:id() == AC_ID or false
end

function lighter_binder:check_is_primary()
    local det = db.actor:item_in_slot(self.m_detector_slot_id)
    if det and det:id() == self.object:id() then
        return true
    end
    if det and western_goods_utils.validate_is_lighter(det) then
        return false
    end
    return true
end

function lighter_binder:check_is_drawn()
    local active_det = db.actor:active_detector()
    return active_det and active_det:id() == self.object:id() or false
end

function lighter_binder:actor_on_hud_animation_mark(state, mark, obj, owner)
    if self.object:id() ~= obj:id() then
        return
    end
    if mark == "flame_on" then
        self:set_flame_status(true)
        return
    end
    if mark == "flame_off" then
        self:set_flame_status(false)
        return
    end
end

function lighter_binder:western_goods_on_campfire_use()
    if not (self:check_is_actor_owner() and self:check_is_fueled() and self:check_is_primary()) then
        return
    end

    local result = self.m_fire_source:light_campfire()
    if result then
        self:play_animation()
        self:update_fuel(self.m_fuel_consumption_use)
    end
end

function lighter_binder:western_goods_on_item_before_use(obj, flags)
    if not (self:check_is_actor_owner() and self:check_is_fueled() and self:check_is_primary()) then
        return
    end

    local result = self.m_fire_source:light_cigarette(obj, flags)
    if result then
        self:update_fuel(self.m_fuel_consumption_use)
    end
end

function lighter_binder:western_goods_on_hideout_furniture_light_use(obj_id)
    if not (self:check_is_actor_owner() and self:check_is_fueled() and self:check_is_primary()) then
        return
    end

    local result = self.m_fire_source:light_gas_lamp(obj_id)
    if result then
        self:play_animation()
        self:update_fuel(self.m_fuel_consumption_use)
    end
end
---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 06/02/2024                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to bind a game_object to a luabind class, to enable specific scripted behaviors.                  ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imported functions
local dbg_printf                       = western_goods_utils.dbg_printf

-- ---------------------------------------------------------------------------------------------------------------------
-- General Functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to bind an object to the Lighter Binder
--- @param obj game_object
--- @return nil
function bind(obj)
    obj:bind_object(lighter_binder(obj))
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Object Binder Class
-- ---------------------------------------------------------------------------------------------------------------------

class "lighter_binder" (item_device.device_binder)

function lighter_binder:__init(obj) super(obj)
    dbg_printf("[WG] Lighter Binder | Binding object '%s'", obj:name())

    -- Script light
    self.m_light = script_light()
    self.m_light.hud_mode = false
    self.m_light.enabled = true
    self.m_light.type = 1
    self.m_light.range = 2.5
    self.m_light.shadow = false
    self.m_light.brightness = 1.0
    self.m_light.color = fcolor():set(0.8, 0.7, 0.3, 0.8)
    self.m_light.lanim = "koster"
    self.m_light.lanim_brightness = 0.0025

    printf("[WG DEBUG] lighter_binder init 0")

    -- Sound effects
    self.m_snd_use_cf = sound_object([[western_goods_tech\lighter_use_cf]])
    self.m_snd_use_cf_fire = sound_object([[western_goods_tech\lighter_use_cf_fire]])

    printf("[WG DEBUG] lighter_binder init 1")

    -- Build variables
    self.m_update_rate = 1000
    self.m_update_timer = 0
    self.m_amn_motion_sec = "motion_campfire"
    self.m_amn_motion = "anm_campfire"

    printf("[WG DEBUG] lighter_binder init 2")
end

function lighter_binder:el_grande_update(delta)
    printf("[WG DEBUG] lighter_binder update 0")

    item_device.device_binder.el_grande_update(self, delta)

    printf("[WG DEBUG] lighter_binder update 1")

    -- Turn off if nothing is drawn
    local obj = db.actor:active_detector()
    if not obj then
        self.m_light.enabled = false
        return
    end

    printf("[WG DEBUG] lighter_binder update 2")

    -- Turn off on wrong devices / device state
    if not self:check(obj) then
        self:set_light_status(obj, false)
        return
    end

    printf("[WG DEBUG] lighter_binder update 3")

    -- Turn off when out of fuel / consume fuel
    if not self:check_fuel(obj) then
        self:set_light_status(obj, false)
        return
    end

    printf("[WG DEBUG] lighter_binder update 4")

    -- Update
    self:drain_fuel(obj)
    self:update_light(obj)
end

function lighter_binder:update_light(obj)
    self:set_light_status(obj, true)
    self.m_light:set_position(self:get_light_bone_position(obj))
    self.m_light:update()
end

function lighter_binder:check(obj)
    local state = obj:get_state()
    if state ~= 0 then
        return false
    end
    return true
end

function lighter_binder:check_fuel(obj)
    local fuel_level = obj:condition() or 0
    local fuel_critical = ini_sys:r_float_ex(obj:section(), "fuel_critical", 0.01)

    return fuel_level > fuel_critical
end

function lighter_binder:drain_fuel(obj, consumption_override)
    -- Throttle update
    if (time_global() < self.m_update_timer) then return end
    self.m_update_timer = time_global() + self.m_update_rate

    local fuel_level = obj:condition() or 0
    local fuel_consumption = consumption_override or ini_sys:r_float_ex(obj:section(), "fuel_consumption", 0.0003)

    dbg_printf("[WG] UI Lighter | Drain Fuel - Lighter old fuel level '%s'", obj:condition())
    obj:set_condition(clamp(fuel_level - fuel_consumption, 0.01, 1))
    dbg_printf("[WG] UI Lighter | Drain Fuel - Lighter new fuel level '%s'", obj:condition())
end

function lighter_binder:get_light_bone_position(obj)
    local pos = western_goods_utils.bone_hud_position(obj, "lid", "bone01")
    return pos or db.actor:position()
end

function lighter_binder:set_light_status(obj, status)
    self.m_light.enabled = status
    western_goods_utils.bone_hud_visibility(obj, "lid", "bone01", status)
end
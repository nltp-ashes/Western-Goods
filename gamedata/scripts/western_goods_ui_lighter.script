--- Original Author(s) : NLTP_ASHES
--- Edited : N/A
--- Date : 22/06/2023
--- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
---
--- Script used to handle the UI for the BIC Lighter.

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imported functions
local dbg_printf             = western_goods_utils.dbg_printf

-- Singleton
GUI                          = nil                              -- instance, don't touch


-- ---------------------------------------------------------------------------------------------------------------------
-- General Functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to get the UI singleton for the UILighter class.
--- @return UILighter
function get_ui()
    if not GUI then
        GUI = UILighter()
    end

    return GUI
end

--- Function called from game_tutorials.xml used to light up campfires with a lighter.
--- @return nil
function turn_campfire_on()
    dbg_printf("[WG] UI Lighter | Turn Campfire On - called from game_tutorials.xml")
    this.get_ui():UseCampfire()
end

--- Function called when the user uses a cigarette.
--- @param obj game_object
--- @param flags table
--- @return nil
function use_cigarette(obj,flags)
    itms_manager_actor_on_item_before_use(obj,flags)
    this.get_ui():UseCigarette(obj,flags)
end

--- Monkey-patch either :
--- - FDDA's enhanced_animations.originalAOIBU
--- - or Anomaly's itms_manager_actor_on_item_before_use
if enhanced_animations then
    dbg_printf("[WG] UI Lighter | Monkey-patching FDDA's enhanced_animations.originalAOIBU function...")
    itms_manager_actor_on_item_before_use = enhanced_animations.originalAOIBU
    enhanced_animations.originalAOIBU = use_cigarette
else
    dbg_printf("[WG] UI Lighter | Monkey-patching Anomaly's itms_manager.actor_on_item_before_use function...")
    itms_manager_actor_on_item_before_use = itms_manager.actor_on_item_before_use
    itms_manager.actor_on_item_before_use = use_cigarette
end

-- ---------------------------------------------------------------------------------------------------------------------
-- UI Class
-- ---------------------------------------------------------------------------------------------------------------------

class "UILighter" (CUIScriptWnd)

function UILighter:__init() super()
    dbg_printf("[WG] UI Lighter | Constructing GUI...")

    self:Show(true)
    self:Enable(true)

    -- Build UI
    self.m_xml = CScriptXmlInit()
    self.m_xml:ParseFile("ui_western_goods_lighter.xml")
    self.m_xml:InitWindow("lighter", 0, self)

    -- Script light
    self.m_light = script_light()
    self.m_light.hud_mode = false
    self.m_light.enabled = true
    self.m_light.type = 1
    self.m_light.range = 3
    self.m_light.shadow = false
    self.m_light.brightness = 1.0
    self.m_light.color = fcolor():set(0.8, 0.4, 0.0, 0.8)
    self.m_light.lanim = "koster"
    self.m_light.lanim_brightness = 0.0025

    -- Sound effects
    self.m_snd_use_cf = sound_object("gestures\\gesture_sound")

    -- Build variables
    self.m_update_rate = 1000
    self.m_update_timer = 0
    self.m_amn_motion_sec = "motion_campfire"
    self.m_amn_motion = "anm_campfire"
    self.m_valid_sections = { "wg_lighter_bic" }

    -- Callbacks
    RegisterScriptCallback("actor_item_to_slot", self)
end

function UILighter:__finalize()
    GUI = nil
end

function UILighter:Update()

    CUIScriptWnd.Update(self)

    -- Turn off if nothing is drawn
    local obj = db.actor:active_detector()
    if not obj then
        self.m_light.enabled = false
        return
    end

    -- Turn off on wrong devices / device state
    if not self:Check(obj) then
        self:SetLightStatus(obj, false)
        return
    end

    -- Turn off when out of fuel / consume fuel
    if not self:CheckFuel(obj) then
        self:SetLightStatus(obj, false)
        return
    else
        self:DrainFuel(obj)
    end

    -- Update
    self:UpdateLight(obj)
end

function UILighter:UpdateLight(obj)
    self:SetLightStatus(obj, true)
    self.m_light:set_position(self:GetLightBonePosition(obj))
    self.m_light:update()
end

function UILighter:Check(obj)
    local state = obj:get_state()
    if state ~= 0 then return false end

    return western_goods_utils.table_contains(self.m_valid_sections, obj:section())
end

function UILighter:CheckFuel(obj)
    local fuel_level = obj:condition() or 0
    local fuel_critical = ini_sys:r_float_ex(obj:section(), "fuel_critical", 0.01)

    return fuel_level > fuel_critical
end

function UILighter:DrainFuel(obj)
    -- Throttle update
    if (time_global() < self.m_update_timer) then return end
    self.m_update_timer = time_global() + self.m_update_rate

    local fuel_level = obj:condition() or 0
    local fuel_consumption = ini_sys:r_float_ex(obj:section(), "fuel_consumption", 0.003)

    obj:set_condition(fuel_level - fuel_consumption)
end

function UILighter:GetLightBonePosition(obj)
    local pos = western_goods_utils.bone_hud_position(obj, "lid", "bone01")
    return pos or db.actor:position()
end

function UILighter:SetLightStatus(obj, status)
    self.m_light.enabled = status
    western_goods_utils.bone_hud_visibility(obj, "lid", "bone01", status)
end

function UILighter:UseCampfire()
    -- Get held object (if any) and return if none
    local obj = db.actor:active_detector()
    if not obj then
        return
    end

    -- Return on invalid item in hands
    if not western_goods_utils.table_contains(self.m_valid_sections, obj:section()) then
        dbg_printf("[WG] UI Lighter | Use Campfire - Cannot use '%s' to light campfires", obj:section())
        return
    end

    -- Hide inventory UI
    if get_hud() then
        hide_hud_inventory()
    end

    local fuel_level = obj:condition() or 0
    local fuel_consumption_use = ini_sys:r_float_ex(obj:section(), "fuel_consumption_use", 0.05)

    -- Check fuel level
    if fuel_level < fuel_consumption_use then
        actor_menu.set_msg(1, western_goods_utils.get_translation("st_wg_not_enough_fuel"), 3)
        dbg_printf("[WG] UI Lighter | Use Campfire - Not enough fuel : %s/%s", fuel_level, fuel_consumption_use)
        return
    end

    -- Get nearby campfire (or use campfire passed as argument)
    local campfire = bind_campfire.get_nearby_campfire(4, true)
    if not campfire then
        printf("~[WG] WARNING | UI Lighter | Use Campfire - No campfire found ! [pos: %s | lvid: %s | gvid: %s]", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
        return
    end

    -- Return if campfire is already on
    if (campfire:is_on()) then
        dbg_printf("[WG] UI Lighter | Use Campfire - Campfire is already on")
        return
    end

    -- We wuzz rain and shit
    if bind_campfire.rain_pass() then
        if (bind_campfire.k_rain < 1) then
            bind_campfire.k_rain = bind_campfire.k_rain + 1
        end
        actor_effects.play_item_fx("matches_script")
        xr_sound.set_sound_play(AC_ID,"inv_matches")
        campfire:turn_on()
        self:CampfireAnimation()
        actor_menu.set_msg(1, western_goods_utils.get_translation("st_camp_help"), 3)
        dbg_printf("[WG] UI Lighter | Use Campfire - Successfully light campfire")
    else
        actor_effects.play_item_fx("matches_script")
        actor_menu.set_msg(1, western_goods_utils.get_translation("st_fail"), 3)
        dbg_printf("[WG] UI Lighter | Use Campfire - Failed to light campfire because of rain")
    end

    -- Use fuel
    dbg_printf("[WG] UI Lighter | Use Campfire - Lighter old fuel level '%s'", obj:condition())
    obj:set_condition(clamp(fuel_level - fuel_consumption_use, 0.01, 1))
    dbg_printf("[WG] UI Lighter | Use Campfire - Lighter new fuel level '%s'", obj:condition())
end

function UILighter:CampfireAnimation()
    self.m_snd_use_cf:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    game.play_hud_motion(1, self.m_amn_motion_sec, self.m_amn_motion, true, 1.0)
    dbg_printf("[WG] UI Lighter | Campfire Animation - Played motion %s in section %s", self.m_amn_motion, self.m_amn_motion_sec)
end

function UILighter:UseCigarette(obj,flags)
    local require_tool = ini_sys:r_string_ex(obj:section(), "required_tool")
    local obj_tool = require_tool and ini_sys:section_exist(require_tool) and db.actor:object(require_tool)

    -- Return if no tool is required, or if player already has a tool
    if not require_tool or obj_tool then
        dbg_printf("[WG] UI Lighter | Use Cigarette - Object requires no tool or player has necessary tool already")
        return
    end

    -- Search for valid items in player inventory
    western_goods_utils.inventory_iter(db.actor,function(owner, object)
        if western_goods_utils.table_contains(self.m_valid_sections, object:section()) then
            dbg_printf("[WG] UI Lighter | actor_on_item_before_use - Found valid item")
            obj_tool = object
            return true
        end
    end)

    -- Return if player doesn't have a lighter
    if not obj_tool then
        dbg_printf("[WG] UI Lighter | Use Cigarette - No valid item found")
        return
    end

    local fuel_level = obj_tool:condition() or 0
    local fuel_consumption_use = ini_sys:r_float_ex(obj_tool:section(), "fuel_consumption_use", 0.05)

    -- Use fuel
    dbg_printf("[WG] UI Lighter | Use Cigarette - Lighter old fuel level '%s'", obj_tool:condition())
    obj_tool:set_condition(clamp(fuel_level - fuel_consumption_use, 0.01, 1))
    dbg_printf("[WG] UI Lighter | Use Cigarette - Lighter new fuel level '%s'", obj_tool:condition())

    -- Override "missing tool" message
    actor_menu.set_msg(1, "", 5)
    flags.ret_value = true
end

function UILighter:actor_item_to_slot(obj)
    dbg_printf("[WG] UI Lighter | actor_item_to_slot - Switched slot to '%s'", obj and obj:section())
    self:Update()
end
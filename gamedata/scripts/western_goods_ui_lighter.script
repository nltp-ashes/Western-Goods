---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 10/12/2023                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to handle the UI for the BIC Lighter.                                                             ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imported functions
local dbg_printf             = western_goods_utils.dbg_printf

-- Singleton
GUI                          = nil                              -- instance, don't touch

-- ---------------------------------------------------------------------------------------------------------------------
-- General Functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to get the UI singleton for the UILighter class.
--- @return UILighter
function get_ui()
    if not GUI then
        GUI = UILighter()
    end

    return GUI
end

--- Function called from game_tutorials.xml used to light up campfires with a lighter.
--- @return nil
function turn_campfire_on()
    dbg_printf("[WG] UI Lighter | Turn Campfire On - called from game_tutorials.xml")
    this.get_ui():UseCampfire()
end

--- Function called when the user uses a cigarette.
--- @param obj game_object
--- @param flags table
--- @return nil
function use_cigarette(obj,flags)
    itms_manager_actor_on_item_before_use(obj,flags)
    this.get_ui():UseCigarette(obj,flags)
end

--- Monkey-patch either :
--- - FDDA's enhanced_animations.originalAOIBU
--- - or Anomaly's itms_manager_actor_on_item_before_use
if enhanced_animations then
    dbg_printf("[WG] UI Lighter | Monkey-patching FDDA's enhanced_animations.originalAOIBU function...")
    itms_manager_actor_on_item_before_use = enhanced_animations.originalAOIBU
    enhanced_animations.originalAOIBU = use_cigarette
else
    dbg_printf("[WG] UI Lighter | Monkey-patching Anomaly's itms_manager.actor_on_item_before_use function...")
    itms_manager_actor_on_item_before_use = itms_manager.actor_on_item_before_use
    itms_manager.actor_on_item_before_use = use_cigarette
end

-- ---------------------------------------------------------------------------------------------------------------------
-- UI Class
-- ---------------------------------------------------------------------------------------------------------------------

class "UILighter" (CUIScriptWnd)

function UILighter:__init() super()
    dbg_printf("[WG] UI Lighter | Constructing GUI...")

    self:Show(true)
    self:Enable(true)

    -- Script light
    self.m_light = script_light()
    self.m_light.hud_mode = false
    self.m_light.enabled = true
    self.m_light.type = 1
    self.m_light.range = 2.5
    self.m_light.shadow = false
    self.m_light.brightness = 1.0
    self.m_light.color = fcolor():set(0.8, 0.7, 0.3, 0.8)
    self.m_light.lanim = "koster"
    self.m_light.lanim_brightness = 0.0025

    -- Sound effects
    self.m_sounds = {}
    self.m_snd_use_cf = sound_object([[western_goods_tech\lighter_use_cf]])
    self.m_snd_use_cf_fire = sound_object([[western_goods_tech\lighter_use_cf_fire]])

    -- Particle objects
    self.m_particles = {}

    -- Build variables
    self.m_range = 4
    self.m_burn_damage = 0.5
    self.m_update_rate = 1000
    self.m_update_timer = 0
    self.m_amn_motion = "anm_set_on_fire"
    self.m_amn_motion_sec = "motion_set_on_fire"
    self.m_amn_motion_playing = false
    self.m_valid_sections = { "wg_lighter_bic" }

    -- Callbacks
    RegisterScriptCallback("actor_item_to_slot", self)
    RegisterScriptCallback("actor_on_update", self)
    RegisterScriptCallback("on_key_press", self)
end

function UILighter:__finalize()
    GUI = nil
end

function UILighter:Update()

    CUIScriptWnd.Update(self)

    -- Turn off if nothing is drawn
    local obj = db.actor:active_detector()
    if not obj then
        self.m_light.enabled = false
        return
    end

    -- Turn off on wrong devices / device state
    if not self:Check(obj) then
        self:SetLightStatus(obj, false)
        return
    end

    -- Turn off when out of fuel / consume fuel
    if not self:CheckFuel(obj) then
        self:SetLightStatus(obj, false)
        return
    else
        self:DrainFuel(obj)
    end

    -- Update
    self:UpdateLight(obj)
end

function UILighter:UpdateLight(obj)
    self:SetLightStatus(obj, true)
    self.m_light:set_position(self:GetLightBonePosition(obj))
    self.m_light:update()
end

function UILighter:UpdateParticles()
    if is_empty(self.m_particles) then
        return
    end

    for id, part in pairs(self.m_particles) do
        local obj = id and level.object_by_id(id)
        if obj then
            local pos = vector():set(western_goods_utils.bone_position(obj, "bip01_spine1")) or obj:position()
            if not part:playing() then
                part:play_at_pos(pos)
            end
            part:move_to(pos, VEC_ZERO)
        else
            self.m_particles[id] = nil
        end
    end
end

function UILighter:UpdateSounds()
    if is_empty(self.m_sounds) then
        return
    end

    for id, snd in pairs(self.m_sounds) do
        local obj = id and level.object_by_id(id)
        if obj then
            local pos = vector():set(western_goods_utils.bone_position(obj, "bip01_spine1")) or obj:position()
            if not snd:playing() then
                snd:play_at_pos(obj, pos, 0, sound_object.s3d)
                snd.volume = 5
            end
            snd:set_position(pos)
        else
            self.m_sounds[id] = nil
        end
    end
end

function UILighter:Check(obj)
    local state = obj:get_state()
    if state ~= 0 then return false end

    return western_goods_utils.table_contains(self.m_valid_sections, obj:section())
end

function UILighter:CheckFuel(obj)
    local fuel_level = obj:condition() or 0
    local fuel_critical = ini_sys:r_float_ex(obj:section(), "fuel_critical", 0.01)

    return fuel_level > fuel_critical
end

function UILighter:DrainFuel(obj)
    -- Throttle update
    if (time_global() < self.m_update_timer) then return end
    self.m_update_timer = time_global() + self.m_update_rate

    local fuel_level = obj:condition() or 0
    local fuel_consumption = ini_sys:r_float_ex(obj:section(), "fuel_consumption", 0.0003)

    obj:set_condition(fuel_level - fuel_consumption)
end

function UILighter:GetLightBonePosition(obj)
    local pos = western_goods_utils.bone_hud_position(obj, "lid", "bone01")
    return pos or db.actor:position()
end

function UILighter:SetLightStatus(obj, status)
    self.m_light.enabled = status
    western_goods_utils.bone_hud_visibility(obj, "lid", "bone01", status)
end

function UILighter:UseCampfire()
    -- Get held object (if any) and return if none
    local obj = db.actor:active_detector()
    if not obj then
        return
    end

    -- Return on invalid item in hands
    if not western_goods_utils.table_contains(self.m_valid_sections, obj:section()) then
        dbg_printf("[WG] UI Lighter | Use Campfire - Cannot use '%s' to light campfires", obj:section())
        return
    end

    -- Hide inventory UI
    if get_hud() then
        hide_hud_inventory()
    end

    local fuel_level = obj:condition() or 0
    local fuel_consumption_use = ini_sys:r_float_ex(obj:section(), "fuel_consumption_use", 0.05)

    -- Check fuel level
    if fuel_level < fuel_consumption_use then
        actor_menu.set_msg(1, western_goods_utils.get_translation("st_wg_not_enough_fuel"), 3)
        dbg_printf("[WG] UI Lighter | Use Campfire - Not enough fuel : %s/%s", fuel_level, fuel_consumption_use)
        return
    end

    -- Get nearby campfire (or use campfire passed as argument)
    local campfire_obj = bind_campfire.get_nearby_campfire(self.m_range, false)
    local campfire = campfire_obj and campfire_obj:get_campfire()
    if not campfire_obj or not campfire then
        printf("~[WG] WARNING | UI Lighter | Use Campfire - No campfire found ! [pos: %s | lvid: %s | gvid: %s]", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
        return
    end

    -- Return if campfire is already on
    if (campfire:is_on()) then
        dbg_printf("[WG] UI Lighter | Use Campfire - Campfire is already on")
        return
    end

    -- Play animation
    self:SetOnFireAnimation()

    -- We wuzz rain and shit
    if bind_campfire.rain_pass() then
        if (bind_campfire.k_rain < 1) then
            bind_campfire.k_rain = bind_campfire.k_rain + 1
        end
        campfire:turn_on()
        self.m_snd_use_cf_fire:play_at_pos(campfire_obj, campfire_obj:position(), 0, sound_object.s3d)
        actor_menu.set_msg(1, western_goods_utils.get_translation("st_camp_help"), 3)
        dbg_printf("[WG] UI Lighter | Use Campfire - Successfully light campfire")
    else
        actor_menu.set_msg(1, western_goods_utils.get_translation("st_fail"), 3)
        dbg_printf("[WG] UI Lighter | Use Campfire - Failed to light campfire because of rain")
    end

    -- Use fuel
    dbg_printf("[WG] UI Lighter | Use Campfire - Lighter old fuel level '%s'", obj:condition())
    obj:set_condition(clamp(fuel_level - fuel_consumption_use, 0.01, 1))
    dbg_printf("[WG] UI Lighter | Use Campfire - Lighter new fuel level '%s'", obj:condition())
end

function UILighter:SetOnFireAnimation()
    -- Don't play if anim is already playing
    if self.m_amn_motion_playing then
        return false
    end

    -- HUD motion
    game.play_hud_motion(1, self.m_amn_motion_sec, self.m_amn_motion, true, 1.0)
    self.m_amn_motion_playing = true

    -- Cam anim
    actor_effects.play_item_fx("matches_script")

    -- Sound effect
    self.m_snd_use_cf:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)

    dbg_printf("[WG] UI Lighter | Set On Fire Animation - Played motion %s in section %s", self.m_amn_motion, self.m_amn_motion_sec)

    -- Re-allow anim when it is done
    local duration = game.get_motion_length(self.m_amn_motion_sec, self.m_amn_motion, 1.0) / 1000
    CreateTimeEvent("western_goods_set_on_fire_anim_e", "western_goods_set_on_fire_anim_a", duration, function()
        self.m_amn_motion_playing = false
        return true
    end)

    return true
end

function UILighter:UseCigarette(obj,flags)
    -- Call original function
    itms_manager_actor_on_item_before_use(obj,flags)

    if flags.ret_value == true then
        dbg_printf("[WG] UI Lighter | Use Cigarette - Object was already handled by original function")
        return
    end

    -- Get required tool
    local require_tool = ini_sys:r_string_ex(obj:section(), "required_tool")
    local obj_tool = require_tool and ini_sys:section_exist(require_tool) and db.actor:object(require_tool)

    -- Return if no tool is required, or if player already has a tool
    if not require_tool or obj_tool then
        dbg_printf("[WG] UI Lighter | Use Cigarette - Object requires no tool or player has necessary tool already")
        return
    end

    -- Search for valid items in player inventory
    western_goods_utils.inventory_iter(db.actor,function(owner, object)
        if western_goods_utils.table_contains(self.m_valid_sections, object:section()) then
            dbg_printf("[WG] UI Lighter | actor_on_item_before_use - Found valid item")
            obj_tool = object
            return true
        end
    end)

    -- Return if player doesn't have a lighter
    if not obj_tool then
        dbg_printf("[WG] UI Lighter | Use Cigarette - No valid item found")
        return
    end

    local fuel_level = obj_tool:condition() or 0
    local fuel_consumption_use = ini_sys:r_float_ex(obj_tool:section(), "fuel_consumption_use", 0.05)

    -- Use fuel
    dbg_printf("[WG] UI Lighter | Use Cigarette - Lighter old fuel level '%s'", obj_tool:condition())
    obj_tool:set_condition(clamp(fuel_level - fuel_consumption_use, 0.01, 1))
    dbg_printf("[WG] UI Lighter | Use Cigarette - Lighter new fuel level '%s'", obj_tool:condition())

    -- Override "missing tool" message
    actor_menu.set_msg(1, "", 5)
    flags.ret_value = true
end

function UILighter:SetOnFire()
    local target = level.get_target_obj()
    if not target then
        dbg_printf("[WG] UI Lighter | Set On Fire - No target in sight")
        return
    end

    dbg_printf("[WG] UI Lighter | Set On Fire - Trying to set '%s' on fire", target:name())

    -- Check no weapons in hands
    local wpn = db.actor:active_item()
    if wpn then
        dbg_printf("[WG] UI Lighter | Set On Fire - Failed to set on fire, a weapon '%s' is drawn", wpn:name())
        return
    end

    -- Check if a device is drawn
    local dev = db.actor:active_detector()
    if not dev then
        dbg_printf("[WG] UI Lighter | Set On Fire - Failed to set on fire, no device in hands")
        return
    end

    -- Check if device is a lighter
    if not self:Check(dev) then
        dbg_printf("[WG] UI Lighter | Set On Fire - Failed to set on fire, device '%s' in hands is not a lighter (or is not in ready state)", dev:section())
        return
    end

    -- Check fuel
    if not self:CheckFuel(dev) then
        dbg_printf("[WG] UI Lighter | Set On Fire - Failed to set on fire, lighter is out of fuel")
        return
    end

    -- Check target exists and is either stalker or mutant
    if not (IsStalker(target) or IsMonster(target)) then
        dbg_printf("[WG] UI Lighter | Set On Fire - Failed to set on fire, target '%s' is not a live object", target:name())
        return
    end

    -- Check object within range
    local dist = western_goods_utils.get_distance_sqr(db.actor:position(), target:position())
    if dist > self.m_range then
        dbg_printf("[WG] UI Lighter | Set On Fire - Failed to set on fire, target '%s' is too far away", target:name())
        return
    end

    dbg_printf("[WG] UI Lighter | Set On Fire - Setting '%s' on fire", target:id())

    -- Play animation
    local anim_played = self:SetOnFireAnimation()
    if not anim_played then
        dbg_printf("[WG] UI Lighter | Set On Fire - Failed to set on fire, animation is playing")
        return
    end

    -- Set on fire after 1s
    local burn_event_id = "western_goods_burn_e_" .. target:id()
    local burn_action_id = "western_goods_burn_a_" .. target:id()
    CreateTimeEvent(burn_event_id, burn_action_id, 0.5, function(target_id)
        local target = western_goods_utils.level_object_by_id(target_id)
        if not target then
            printf("~[WG] UI Lighter | Set On Fire - No game_object found for '%s' when trying to set on fire", target_id)
            return true
        end

        -- Add PFX and SFX
        self.m_particles[target_id] = particles_object([[damage_fx\burn_creatures00]])
        self.m_sounds[target_id] = sound_object([[anomaly\fire2]])
        dbg_printf("[WG] UI Lighter | Set On Fire - Created PFX '%' and SFX '%' for '%'", self.m_particles[target_id], self.m_sounds[target_id], target_id)

        -- Add panic
        local demonized_panic_id = "western_goods_panic_" .. target_id
        demonized_stalker_aoe_panic.npc_add_aoe_panic(target_id, demonized_panic_id)
        dbg_printf("[WG] UI Lighter | Set On Fire - Set '%s' in panic state", target_id)

        -- Scripted hit
        local shit = hit()
        shit.power = self.m_burn_damage
        shit.impulse = self.m_burn_damage
        shit:bone("bip01_spine1")
        shit.type = hit.burn
        shit.direction = vector():set(target):sub(db.actor)
        shit.draftsman = db.actor
        target:hit(shit)

        -- Remove panic after 5s
        local panic_event_id = "western_goods_panic_e_" .. target_id
        local panic_action_id = "western_goods_panic_a_" .. target_id
        CreateTimeEvent(panic_event_id, panic_action_id, 5, function()
            local target = western_goods_utils.level_object_by_id(target_id)

            -- Remove panic
            if target then
                demonized_stalker_aoe_panic.npc_remove_aoe_panic(target_id, demonized_panic_id)
                dbg_printf("[WG] UI Lighter | Set On Fire - Stopped panic state for '%s'", target_id)
            else
                printf("~[WG] UI Lighter | Set On Fire - No game_object found for '%s' when trying to unset panic state", target_id)
            end

            -- Remove PFX and SFX
            self.m_particles[target_id]:stop()
            self.m_particles[target_id] = nil
            self.m_sounds[target_id]:stop()
            self.m_sounds[target_id] = nil
            dbg_printf("[WG] UI Lighter | Set On Fire - Destroyed PFX '%' and SFX '%' for '%'", self.m_particles[target_id], self.m_sounds[target_id], target_id)

            -- Kill time event
            return true
        end)

        -- Kill time event
        return true
    end, target:id())
end

function UILighter:actor_item_to_slot(obj)
    dbg_printf("[WG] UI Lighter | actor_item_to_slot - Switched slot to '%s'", obj and obj:section())
    self:Update()
end

function UILighter:actor_on_update()
    self:UpdateParticles()
    self:UpdateSounds()
end

function UILighter:on_key_press(dik)
    -- Get key-bind
    local bind = dik_to_bind(dik)

    -- Set object on fire
    if (bind == key_bindings.kWPN_FIRE) then
        self:SetOnFire()
    end
end
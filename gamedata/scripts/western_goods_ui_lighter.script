--- Original Author(s) : NLTP_ASHES
--- Edited : N/A
--- Date : 22/06/2023
--- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
---
--- Script used to handle the UI for the BIC Lighter.

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imported functions
local dbg_printf             = western_goods_utils.dbg_printf

-- Singleton
GUI					         = nil                              -- instance, don't touch


-- ---------------------------------------------------------------------------------------------------------------------
-- General Functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to get the UI singleton for the UILighter class.
--- @return UILighter
function get_ui()
    if (not GUI) then
        GUI = UILighter()
    end

    return GUI
end

-- ---------------------------------------------------------------------------------------------------------------------
-- UI Class
-- ---------------------------------------------------------------------------------------------------------------------

class "UILighter" (CUIScriptWnd)

function UILighter:__init() super()
    dbg_printf("[WG] UI Lighter | Constructing GUI...")

    self:Show(true)
    self:Enable(true)

    -- Build UI
    self.m_xml = CScriptXmlInit()
    self.m_xml:ParseFile("ui_western_goods_lighter.xml")
    self.m_xml:InitWindow("lighter", 0, self)

    -- Script light
    self.m_light = script_light()
    self.m_light.hud_mode = false
    self.m_light.enabled = true
    self.m_light.type = 1
    self.m_light.range = 3
    self.m_light.shadow = false
    self.m_light.brightness = 1.0
    self.m_light.color = fcolor():set(0.8, 0.4, 0.0, 0.8)
    self.m_light.lanim = "koster"
    self.m_light.lanim_brightness = 0.0025

    -- Build variables
    self.m_update_rate = 1000
    self.m_update_timer = 0
    self.m_valid_sections = { "wg_lighter_bic" }

    -- Callbacks
    RegisterScriptCallback("actor_on_item_use", self)
    RegisterScriptCallback("actor_item_to_slot", self)
end

function UILighter:__finalize()
    GUI = nil
end

function UILighter:Update()

    CUIScriptWnd.Update(self)

    -- Turn off if nothing is drawn
    local obj = db.actor:active_detector()
    if not obj then
        self.m_light.enabled = false
        return
    end

    -- Turn off on wrong devices / device state
    if not self:Check(obj) then
        self:SetLightStatus(obj, false)
        return
    end

    -- Turn off when out of fuel / consume fuel
    if not self:CheckFuel(obj) then
        self:SetLightStatus(obj, false)
        return
    else
        self:DrainFuel(obj)
    end

    -- Update
    self:UpdateLight(obj)
end

function UILighter:UpdateLight(obj)
    self:SetLightStatus(obj, true)
    self.m_light:set_position(self:GetLightBonePosition(obj))
    self.m_light:update()
end

function UILighter:Check(obj)
    local state = obj:get_state()
    if state ~= 0 then return false end

    return western_goods_utils.table_contains(self.m_valid_sections, obj:section())
end

function UILighter:CheckFuel(obj)
    local fuel = western_goods_utils.value_or_default(obj:condition(), 0)
    local fuel_critical = western_goods_utils.value_or_default(ini_sys:r_float_ex(obj:section(), "fuel_critical"), 0.01)

    return fuel > fuel_critical
end

function UILighter:DrainFuel(obj)
    if (time_global() < self.m_update_timer) then return end
    self.m_update_timer = time_global() + self.m_update_rate

    local fuel_level = obj:condition()
    local fuel_consumption = western_goods_utils.value_or_default(ini_sys:r_float_ex(obj:section(), "fuel_consumption"), 0.003)

    obj:set_condition(fuel_level - fuel_consumption)
end

function UILighter:GetLightBonePosition(obj)
    local pos = western_goods_utils.bone_hud_position(obj, "lid", "bone01")
    return pos or db.actor:position()
end

function UILighter:SetLightStatus(obj, status)
    self.m_light.enabled = status
    western_goods_utils.bone_hud_visibility(obj, "lid", "bone01", status)
end

function UILighter:actor_on_item_use(obj, _, cf)
    if not western_goods_utils.table_contains(self.m_valid_sections, obj:section()) then return end

    -- Hide inventory UI
    if (get_hud()) then
        hide_hud_inventory()
    end

    bind_campfire.campfire_go_on(obj, cf)
end

function UILighter:actor_item_to_slot(obj)
    self:Update()
end
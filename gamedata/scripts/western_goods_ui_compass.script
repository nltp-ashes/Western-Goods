---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 09/03/2024                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to handle the 3D UI for the compass device.                                                       ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Constants
DEGREES_PER_RADIAN                = 57.296

-- Imported functions
dbg_printf                        = western_goods_utils.dbg_printf

-- Singleton
GUI                               = nil -- instance, don't touch

-- ---------------------------------------------------------------------------------------------------------------------
-- General Functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to get the UI singleton for the UICompass class.
--- @return UICompass
function get_ui()
    if (not GUI) then
        GUI = UICompass()
    end

    return GUI
end

-- ---------------------------------------------------------------------------------------------------------------------
-- UI Class
-- ---------------------------------------------------------------------------------------------------------------------

class "UICompass" (CUIScriptWnd)

function UICompass:__init() super()
    dbg_printf("[WG] UI Compass | Constructing GUI...")

    self:Show(true)
    self:Enable(true)

    -- Build UI
    self.m_xml = CScriptXmlInit()
    self.m_xml:ParseFile("ui_western_goods_compass.xml")
    self.m_xml:InitWindow("compass", 0, self)

    self.m_xml:InitWindow("compass:speed", 0, self)
    self.m_speed_bg = self.m_xml:InitStatic("compass:speed:background", self)
    self.m_speed_label = self.m_xml:InitStatic("compass:speed:label", self)
    self.m_speed_m = self.m_xml:InitStatic("compass:speed:m", self)
    self.m_speed_dm = self.m_xml:InitStatic("compass:speed:dm", self)
    self.m_speed_unit = self.m_xml:InitStatic("compass:speed:unit", self)

    self.m_xml:InitWindow("compass:dist", 0, self)
    self.m_dist_bg = self.m_xml:InitStatic("compass:dist:background", self)
    self.m_dist_label = self.m_xml:InitStatic("compass:dist:label", self)
    self.m_dist_km = self.m_xml:InitStatic("compass:dist:km", self)
    self.m_dist_dot = self.m_xml:InitStatic("compass:dist:dot", self)
    self.m_dist_hm = self.m_xml:InitStatic("compass:dist:hm", self)
    self.m_dist_dam = self.m_xml:InitStatic("compass:dist:dam", self)
    self.m_dist_unit = self.m_xml:InitStatic("compass:dist:unit", self)

    self.m_xml:InitWindow("compass:eta", 0, self)
    self.m_eta_bg = self.m_xml:InitStatic("compass:eta:background", self)
    self.m_eta_label = self.m_xml:InitStatic("compass:eta:label", self)
    self.m_eta_hh = self.m_xml:InitStatic("compass:eta:hh", self)
    self.m_eta_h = self.m_xml:InitStatic("compass:eta:h", self)
    self.m_eta_dots = self.m_xml:InitStatic("compass:eta:dots", self)
    self.m_eta_mm = self.m_xml:InitStatic("compass:eta:mm", self)
    self.m_eta_m = self.m_xml:InitStatic("compass:eta:m", self)

    self.m_xml:InitWindow("compass:time", 0, self)
    self.m_time_bg = self.m_xml:InitStatic("compass:time:background", self)
    self.m_time_label = self.m_xml:InitStatic("compass:time:label", self)
    self.m_time_mm = self.m_xml:InitStatic("compass:time:mm", self)
    self.m_time_m = self.m_xml:InitStatic("compass:time:m", self)
    self.m_time_dots = self.m_xml:InitStatic("compass:time:dots", self)
    self.m_time_ss = self.m_xml:InitStatic("compass:time:ss", self)
    self.m_time_s = self.m_xml:InitStatic("compass:time:s", self)

    self.m_xml:InitWindow("compass:heading", 0, self)
    self.m_heading_bg = self.m_xml:InitStatic("compass:heading:background", self)
    self.m_heading_cursor = self.m_xml:InitStatic("compass:heading:cursor", self)

    -- Build variables
    self.m_update_timer = 0
    self.m_update_freq = 16
    self.m_idle_speed_threshold = 1
    self.m_digit_texture_prefix = "wg_cp_digit_"
end

function UICompass:__finalize()
    GUI = nil
end

function UICompass:Update()

    CUIScriptWnd.Update(self)

    -- Throttle update
    if not self:ShouldUpdate() then
        return
    end

    -- Speed
    local speed1, speed2 = self:GetSpeedTextures()
    self.m_speed_m:InitTextureEx(speed1, "hud\\p3d")
    self.m_speed_dm:InitTextureEx(speed2, "hud\\p3d")

    -- Distance to waypoint
    local dist1, dist2, dist3 = self:GetDistTextures()
    self.m_dist_km:InitTextureEx(dist1, "hud\\p3d")
    self.m_dist_hm:InitTextureEx(dist2, "hud\\p3d")
    self.m_dist_dam:InitTextureEx(dist3, "hud\\p3d")

    -- Estimated Time of Arrival (ETA) to waypoint
    local eta1, eta2, eta3, eta4 = self:GetETATextures()
    self.m_eta_hh:InitTextureEx(eta1, "hud\\p3d")
    self.m_eta_h:InitTextureEx(eta2, "hud\\p3d")
    self.m_eta_mm:InitTextureEx(eta3, "hud\\p3d")
    self.m_eta_m:InitTextureEx(eta4, "hud\\p3d")

    -- Time to waypoint
    local time1, time2, time3, time4 = self:GetTimeTextures()
    self.m_time_mm:InitTextureEx(time1, "hud\\p3d")
    self.m_time_m:InitTextureEx(time2, "hud\\p3d")
    self.m_time_ss:InitTextureEx(time3, "hud\\p3d")
    self.m_time_s:InitTextureEx(time4, "hud\\p3d")

    -- Compass
    local heading_rad = self:GetHeadingRadians()
    if western_goods_mcm.get_config("compass_north_lock") then
        self.m_heading_bg:InitTextureEx("wg_cp_heading_locked", "hud\\p3d")
        self.m_heading_bg:SetHeading(0)
        self.m_heading_cursor:SetHeading(heading_rad)
    else
        self.m_heading_bg:InitTextureEx("wg_cp_heading_unlocked", "hud\\p3d")
        self.m_heading_bg:SetHeading(heading_rad)
        self.m_heading_cursor:SetHeading(0)
    end
end

function UICompass:ShouldUpdate()
    local tg = time_global()
    if (tg < self.m_update_timer) then
        return false
    else
        self.m_update_timer = tg + self.m_update_freq
        return true
    end
end

function UICompass:GetHeadingRadians()
    local position = vector():set(0, 0, 0)
    local direction = vector():set(0, 0, 0):sub(device().cam_dir)

    local dx = position.x - direction.x
    local dz = position.z - direction.z

    return math.atan2(dx, dz)
end

function UICompass:GetSpeed()
    local movement = db.actor:get_movement_speed()
    local speed = western_goods_utils.vec_magnitude_xz(movement)
    speed = speed * 3.6 -- x3.6 to convert from m/s to km/h

    return clamp(math.floor(speed), 0, 999)
end

function UICompass:GetSpeedTextures()
    local speed = self:GetSpeed()
    local s_speed = western_goods_utils.as_string(speed, 2)

    return western_goods_utils.get_digits_as_textures(self.m_digit_texture_prefix, s_speed)
end

function UICompass:GetDist()
    local tsk_active = western_goods_utils.task_get_active()
    local tsk_target = tsk_active and western_goods_utils.task_get_target(tsk_active)

    if not tsk_target then
        return nil
    end

    local dist = western_goods_utils.get_distance_global(alife():actor(), tsk_target)
    dist = dist / 10 -- /10 to convert from meters to decameters

    return clamp(math.floor(dist), 0, 999)
end

function UICompass:GetDistTextures()
    local dist = self:GetDist()

    if not dist then
        return "wg_cp_char_dash", "wg_cp_char_dash", "wg_cp_char_dash"
    end

    local s_dist = western_goods_utils.as_string(dist, 3)

    return western_goods_utils.get_digits_as_textures(self.m_digit_texture_prefix, s_dist)
end

function UICompass:GetETA()
    local dist = self:GetDist()

    if not dist then
        return nil
    end

    local speed = self:GetSpeed()

    if speed < self.m_idle_speed_threshold then
        return nil
    end

    local time_to_dest_sec = dist * 10 / speed -- x10 to convert from decameters to meters
    local time_at_dest_sec = utils_data.CTimeAddSec(game.get_game_time(), time_to_dest_sec)
    local time_at_dest_ct = utils_data.CTime_from_table({ Y=1, M=1, D=1, h=0, m=0, s=time_at_dest_sec, ms=0 })
    local time_at_dest_ctt = utils_data.CTime_to_table(time_at_dest_ct)

    if time_at_dest_ctt.h > 0 then
        return time_at_dest_ctt.h, time_at_dest_ctt.m
    else
        return time_at_dest_ctt.m, time_at_dest_ctt.s
    end
end

function UICompass:GetETATextures()
    local hrs, mins = self:GetETA()

    if not hrs or not mins then
        return "wg_cp_char_dash", "wg_cp_char_dash", "wg_cp_char_dash", "wg_cp_char_dash"
    end

    local s_hrs = western_goods_utils.as_string(hrs, 2)
    local s_mins = western_goods_utils.as_string(mins, 2)

    return western_goods_utils.get_digits_as_textures(self.m_digit_texture_prefix, s_hrs, s_mins)
end

function UICompass:GetTime()
    local dist = self:GetDist()

    if not dist then
        return nil
    end

    local speed = self:GetSpeed()

    if speed < self.m_idle_speed_threshold then
        return nil
    end

    local time_to_dest_sec = dist * 10 / speed -- x10 to convert from decameters to meters
    local time_to_dest_ct = utils_data.CTime_from_table({ Y=1, M=1, D=1, h=0, m=0, s=time_to_dest_sec, ms=0 })
    local time_to_dest_ctt = utils_data.CTime_to_table(time_to_dest_ct)

    if time_to_dest_ctt.h > 0 then
        return time_to_dest_ctt.h, time_to_dest_ctt.m
    else
        return time_to_dest_ctt.m, time_to_dest_ctt.s
    end
end

function UICompass:GetTimeTextures()
    local hrs, mins = self:GetTime()

    if not hrs or not mins then
        return "wg_cp_char_dash", "wg_cp_char_dash", "wg_cp_char_dash", "wg_cp_char_dash"
    end

    local s_hrs = western_goods_utils.as_string(hrs, 2)
    local s_mins = western_goods_utils.as_string(mins, 2)

    return western_goods_utils.get_digits_as_textures(self.m_digit_texture_prefix, s_hrs, s_mins)
end
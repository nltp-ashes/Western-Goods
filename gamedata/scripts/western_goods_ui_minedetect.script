---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 22/11/2023                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    This script handles the core logic of the mine detector device.                                               ---
---    UIMineDetector:Check function was written by GhenTuong.                                                       ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imported functions
local dbg_printf             = western_goods_utils.dbg_printf

-- Singleton
GUI                          = nil                              -- instance, don't touch

-- ---------------------------------------------------------------------------------------------------------------------
-- General Functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to get the UI singleton for the UIMineDetector class.
--- @return UIMineDetector
function get_ui()
    if (not GUI) then
        GUI = UIMineDetector()
    end

    return GUI
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Callbacks registration
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to register callbacks.
--- @return nil
function on_game_start()
end

-- ---------------------------------------------------------------------------------------------------------------------
-- UI Class
-- ---------------------------------------------------------------------------------------------------------------------

class "UIMineDetector" (CUIScriptWnd)

function UIMineDetector:__init() super()
    dbg_printf("[WG] UI MineDetector | Constructing GUI...")

    self:Show(true)
    self:Enable(true)

    -- Build UI
    self.m_xml = CScriptXmlInit()
    self.m_xml:ParseFile("ui_western_goods_minedetect.xml")
    self.m_xml:InitWindow("mine_detector", 0, self)

    self.m_detect = self.m_xml:InitStatic("mine_detector:detect", self)

    -- Sound effects
    self.m_detect_sfx = sound_object([[detectors\art_beep1]])

    -- Build variables
    self.m_update_timer = 0
    self.m_angle_min = -20
    self.m_angle_max = 20
    self.m_update_freq_min = 111
    self.m_update_freq_max = 999
    self.m_detect_dist_min_sqr = 2500
    self.m_detect_dist_max_sqr = 40000
    self.m_max_scan_range = 49
    self.m_valid_sections = { "wg_minedetect" }
    self.m_time_global = time_global()
end

function UIMineDetector:__finalize()
    GUI = nil
end

function UIMineDetector:Update()

    CUIScriptWnd.Update(self)

    -- Don't refresh if device isn't drawn out
    local active_det = db.actor:active_detector()
    if not active_det or not western_goods_utils.table_contains(self.m_valid_sections, active_det:section()) then
        return
    end

    -- Don't refresh if timer isn't hit
    self.m_time_global = time_global()
    if (self.m_time_global < self.m_update_timer) then
        return
    end

    -- Get best aim 'score', and corresponding object
    local best_aim, best_obj = self:FindBest()

    -- Refresh device
    self:RefreshDevice(best_aim, best_obj)
end

function UIMineDetector:RefreshDevice(best_aim, best_obj)

    -- If best mine is too far, no detection
    if (not best_aim or best_aim > self.m_detect_dist_max_sqr) then
        self.m_update_timer = self.m_time_global + self.m_update_freq_max
        self.m_detect:Show(false)
        return
    end

    -- If best mine is really close, fast ticking
    if (best_aim < self.m_detect_dist_min_sqr) then
        self.m_update_timer = self.m_time_global + self.m_update_freq_min
        self.m_detect:Show(not self.m_detect:IsShown())
        self.m_detect_sfx:play(db.actor, 0, sound_object.s2d)
        return
    end

    -- If best mine is somewhere in between
    local freq = normalize(best_aim, self.m_detect_dist_min_sqr, self.m_detect_dist_max_sqr) * self.m_update_freq_max
    freq = clamp(freq, self.m_update_freq_min, self.m_update_freq_max)

    self.m_update_timer = self.m_time_global + freq
    self.m_detect:Show(not self.m_detect:IsShown())
    self.m_detect_sfx:play(db.actor, 0, sound_object.s2d)
end

function UIMineDetector:FindBest()
    local mine_fields = self:GetMineFields()
    local mine_objs = self:GetMineObjects()

    local best_aim, best_mine = nil, nil

    local function try_best_mine(obj)
        local aim = self:CheckAim(obj)
        if self:IsValidMine(obj) and (not best_aim or aim < best_aim) then
            best_aim, best_mine = aim, obj
        end
    end

    for _, obj in pairs(mine_fields) do
        try_best_mine(obj)
    end

    for _, obj in pairs(mine_objs) do
        try_best_mine(obj)
    end

    return best_aim, best_mine
end

function UIMineDetector:CheckAim(mine)
    local w2ui = game.world2ui(mine:position())

    local center = vector():set(512, 384, 0)
    local aim = vector():set(w2ui.x, w2ui.y, 0)

    return center:distance_to_sqr(aim)
end

function UIMineDetector:IsValidMine(mine)
    local dist = db.actor:position():distance_to_sqr(mine:position())
    return dist <= self.m_max_scan_range
end

function UIMineDetector:GetMineFields()
    local mines = {}
    for _,obj in pairs(db.zone_by_name) do
        if (western_goods_utils.is_minefield(obj)) then
            mines[obj:id()] = obj
        end
    end
    return mines
end

function UIMineDetector:GetMineObjects()
    local mines = {}
    for id,_ in pairs(txr_mines._mines) do
        mines[id] = western_goods_utils.level_object_by_id(id)
    end
    return mines
end
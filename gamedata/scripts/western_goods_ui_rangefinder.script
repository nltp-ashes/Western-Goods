--- Original Author(s) : <unknown>
--- Edited : NLTP_ASHES
--- Date : 19/06/2023
--- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
---
--- Based off ui_dosimeter.script by <unknown>, script used to handle the UI for the Rangefinder.

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Constants
local CONST_UPDATE_FREQ      = 222                              -- in milliseconds
local CONST_ITEM_SEC         = "wg_rangefinder"                 -- name of the range finder section

-- Imported functions
local dbg_printf             = western_goods_utils.dbg_printf

-- Singleton
GUI					         = nil                              -- instance, don't touch

-- Variables
local hud_fov                                                   -- cache for user defined hud_fov

-- ---------------------------------------------------------------------------------------------------------------------
-- General Functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to get the UI singleton for the UIRangefinder class.
--- @return UIRangefinder
function get_ui()
    if (not GUI) then
        GUI = UIRangefinder()
    end

    return GUI
end

-- ---------------------------------------------------------------------------------------------------------------------
-- UI Class
-- ---------------------------------------------------------------------------------------------------------------------

class "UIRangefinder" (CUIScriptWnd)

function UIRangefinder:__init() super()
    dbg_printf("[WG] UI Rangefinder | Constructing GUI...")

    self:Show(true)
    self:Enable(true)

    self.xml = CScriptXmlInit()
    self.xml:ParseFile("ui_western_goods_rangefinder.xml")
    self.xml:InitWindow("rangefinder", 0, self)

    -- Sound effects
    self.m_sfx_btn = sound_object([[western_goods_tech\rangefinder_btn]])

    -- Build variables
    self.m_update_timer = 0
    self.m_night_vision = false

    -- Build UI
    self.m_los1 = self.xml:InitStatic("rangefinder:los1", self)
    self.m_los2 = self.xml:InitStatic("rangefinder:los2", self)
    self.m_los3 = self.xml:InitStatic("rangefinder:los3", self)

    self.m_hcd1 = self.xml:InitStatic("rangefinder:hcd1", self)
    self.m_hcd2 = self.xml:InitStatic("rangefinder:hcd2", self)
    self.m_hcd3 = self.xml:InitStatic("rangefinder:hcd3", self)

    self.m_reticule = self.xml:InitStatic("rangefinder:reticule", self)

    -- Callbacks
    RegisterScriptCallback("actor_on_weapon_zoom_in", self)
    RegisterScriptCallback("actor_on_weapon_zoom_out", self)
end

function UIRangefinder:__finalize()
    GUI = nil
end

function UIRangefinder:Update()

    CUIScriptWnd.Update(self)

    local tg = time_global()

    if (tg < self.m_update_timer) then
        return
    else
        self.m_update_timer = tg + CONST_UPDATE_FREQ
    end

    -- Line Of Sight Distance
    local los1, los2, los3 = self:GetLOSTextures()

    -- Horizontal Compensation Distance Distance
    local hcd1, hcd2, hcd3 = self:GetHCDTextures()

    -- Reticule
    local ret = "rf_reticule"

    -- Night Vision
    local nv = self:GetNightVisionSuffix()

    self.m_los1:InitTextureEx(los1..nv, [[hud\p3d]])
    self.m_los2:InitTextureEx(los2..nv, [[hud\p3d]])
    self.m_los3:InitTextureEx(los3..nv, [[hud\p3d]])

    self.m_hcd1:InitTextureEx(hcd1..nv, [[hud\p3d]])
    self.m_hcd2:InitTextureEx(hcd2..nv, [[hud\p3d]])
    self.m_hcd3:InitTextureEx(hcd3..nv, [[hud\p3d]])

    self.m_reticule:InitTextureEx(ret..nv, [[hud\p3d]])
end

function UIRangefinder:GetNightVisionSuffix()
    if self.m_night_vision then
        return "_g"
    else
        return "_r"
    end
end

function UIRangefinder:GetLOSTextures()
    local los = math.floor(level.get_target_dist())

    -- Get LOS number as a 3 char string (5 -> "005")
    local s_los = western_goods_utils.as_string(los, 3)

    -- Line Of Sight format
    if los < 999 then
        local los1 = strformat("rf_num_%s", s_los:sub(1, 1))
        local los2 = strformat("rf_num_%s", s_los:sub(2, 2))
        local los3 = strformat("rf_num_%s", s_los:sub(3, 3))
        return los1, los2, los3
    end

    return "rf_dash", "rf_dash", "rf_dash"
end

function UIRangefinder:GetHCDTextures()
    local los_pos = vector():mad(device().cam_pos, device().cam_dir, level.get_target_dist())
    local hcd_pos = vector():set(los_pos.x, db.actor:position().y , los_pos.z)
    local hcd = math.floor(western_goods_utils.get_distance(device().cam_pos, hcd_pos))

    -- Get HCD number as a 3 char string (5 -> "005")
    local s_hcd = western_goods_utils.as_string(hcd, 3)

    -- Horizontal Compensation Distance format
    if hcd < 999 then
        local hcd1 = strformat("rf_num_%s", s_hcd:sub(1, 1))
        local hcd2 = strformat("rf_num_%s", s_hcd:sub(2, 2))
        local hcd3 = strformat("rf_num_%s", s_hcd:sub(3, 3))
        return hcd1, hcd2, hcd3
    end

    return "rf_dash", "rf_dash", "rf_dash"
end

function UIRangefinder:actor_on_weapon_zoom_in(wpn)
    if wpn:section() ~= CONST_ITEM_SEC then return end

    local old_hud_fov = ui_options.get("video/basic/hud_fov")
    local new_hud_fov = ini_sys:r_float_ex(wpn:section(),"scope_hud_fov")

    exec_console_cmd("hud_fov ".. new_hud_fov)
    hud_fov = old_hud_fov

    RegisterScriptCallback("on_key_press", self)

    dbg_printf("[WG] UI Rangefinder | Changed 'hud_fov' from '%s' to '%s'", old_hud_fov, new_hud_fov)
end

function UIRangefinder:actor_on_weapon_zoom_out(wpn)
    if wpn:section() ~= CONST_ITEM_SEC then return end

    local old_hud_fov = ui_options.get("video/basic/hud_fov")
    local new_hud_fov = hud_fov

    exec_console_cmd("hud_fov " .. new_hud_fov)
    hud_fov = nil

    UnregisterScriptCallback("on_key_press", self)

    dbg_printf("[WG] UI Rangefinder | Restored 'hud_fov' from '%s' to '%s'", old_hud_fov, new_hud_fov)
end

function UIRangefinder:on_key_press(dik)
    if dik ~= western_goods_mcm.get_config("rangefinder_nv") then return end
    if db.actor:active_item() and db.actor:active_item():section() ~= CONST_ITEM_SEC then return end

    GUI.m_night_vision = not GUI.m_night_vision
    GUI.m_sfx_btn:play(db.actor, 0, sound_object.s2d)
end